import java.util.*;

class TwoStacks {
    private int[] arr;   // Array for both stacks
    private int top1;    // Top pointer for Stack 1
    private int top2;    // Top pointer for Stack 2
    private int size;    // Total size of array

    // Constructor
    public TwoStacks(int n) {
        size = n;
        arr = new int[n];
        top1 = -1;
        top2 = n;
    }

    // Push to Stack 1
    public void push1(int x) {
        if (top1 + 1 < top2) {  // Check space
            arr[++top1] = x;
        }
        // else: no space, ignore
    }

    // Push to Stack 2
    public void push2(int x) {
        if (top1 + 1 < top2) {  // Check space
            arr[--top2] = x;
        }
        // else: no space, ignore
    }

    // Pop from Stack 1
    public void pop1() {
        if (top1 >= 0) {
            System.out.println(arr[top1--]);
        }
        // else: stack empty, ignore
    }

    // Pop from Stack 2
    public void pop2() {
        if (top2 < size) {
            System.out.println(arr[top2++]);
        }
        // else: stack empty, ignore
    }
}

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();  // size of array
        TwoStacks ts = new TwoStacks(n);

        while (true) {
            int cmd = sc.nextInt();
            if (cmd == -1) break;

            switch (cmd) {
                case 1: // push1
                    int x1 = sc.nextInt();
                    ts.push1(x1);
                    break;
                case 2: // push2
                    int x2 = sc.nextInt();
                    ts.push2(x2);
                    break;
                case 3: // pop1
                    ts.pop1();
                    break;
                case 4: // pop2
                    ts.pop2();
                    break;
                default:
                    // ignore invalid commands
            }
        }

        sc.close();
    }
}
