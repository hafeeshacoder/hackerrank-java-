import java.util.*;

class TeamNode {
    int data;
    TeamNode left, right;

    TeamNode(int data) {
        this.data = data;
        left = right = null;
    }
}

public class TournamentBracket {

    // Insert into BST
    static TeamNode insert(TeamNode root, int data) {
        if (root == null) {
            return new TeamNode(data);
        }
        if (data < root.data) {
            root.left = insert(root.left, data);
        } else {
            root.right = insert(root.right, data);
        }
        return root;
    }

    // Level-order traversal
    static void levelOrder(TeamNode root) {
        if (root == null) return;

        Queue<TeamNode> queue = new LinkedList<>();
        queue.add(root);

        while (!queue.isEmpty()) {
            TeamNode node = queue.poll();
            System.out.print(node.data + " ");

            if (node.left != null) queue.add(node.left);
            if (node.right != null) queue.add(node.right);
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();  // number of teams
        TeamNode root = null;

        for (int i = 0; i < n; i++) {
            int data = sc.nextInt();
            root = insert(root, data);
        }

        levelOrder(root);
    }
}
