import java.io.*;
import java.util.*;
class Node{
    int id;
    Node left,right;
    
    Node(int id)
    {
        this.id=id;
        this.left=null;
        this.right=null;
    }
}
public class Solution {
    static Node buildTree(String[] values)
    {
        if((values.length==0) || values[0].equals("null"))
        {
            return null;
        }
        
        Node root= new Node(Integer.parseInt(values[0]));
        Queue<Node> q=new LinkedList<>();
        q.add(root);
        int i=1;
        while(!q.isEmpty() && i<values.length)
        {
            Node curr=q.poll();
            
            if(i<values.length && !values[i].equals(null))
            {
                curr.left=new Node(Integer.parseInt(values[i]));
                q.add(curr.left);
            }
            i++;
            
             if(i<values.length && !values[i].equals(null))
            {
                curr.right=new Node(Integer.parseInt(values[i]));
                q.add(curr.right);
            }
            i++;
            
            
        }
        return root;
    }
    
    static int findsumleafnode(Node root)
    {
        if(root==null)  return 0;
        
        if(root.left==null && root.right==null)
        {
            return root.id;
        }
        
        return findsumleafnode(root.left)+findsumleafnode(root.right);
    }
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int n=Integer.parseInt(sc.nextLine());
        String[] values=sc.nextLine().split(" ");
        
        Node root=buildTree(values);
        System.out.print(findsumleafnode(root));
    }
}
